name: "Dev pipeline"

on:
  push:
    branches:
      - dev

jobs:
  terraform:
    name: "Job plan, apply, destroy"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Terraform Init
        id: init
        working-directory: "./cicd-base-deployment/security_stack"
        run: terraform init
        env:
          TF_WORKSPACE: "dev"

      - name: Terraform Workspace
        id: workspace
        run: terraform workspace select dev
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        working-directory: "./cicd-base-deployment/security_stack"
        run: terraform plan -no-color
        continue-on-error: true

#Error: An error occurred trying to start process with working directory. Argument list too long
      # - uses: actions/github-script@v4.0.2
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.PAC_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #       github.repos.createCommitComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         commit_sha: context.sha,
      #         body: output
      #       })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        working-directory: "./cicd-base-deployment/security_stack"
        run: terraform apply -auto-approve
        
      - name: Terraform Destroy
        id: destroy
        working-directory: "./cicd-base-deployment/security_stack"
        run: terraform destroy -auto-approve


      # - name: CreatePR if apply succeed 
      #   id: createpr
      #   uses: actions/github-script@v4.0.2
      #   if: steps.apply.outcome == 'success'
      #   with:
      #     debug: true
      #     github-token: ${{ secrets.PAC_TOKEN }}
      #     script: |
      #       github.pulls.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: "Auto PR generate by Github Action dev pipeline",
      #         head: "dev",
      #         base: "main"
      #       });
      # - name: Revert commit if any step failed
      #   uses: actions/github-script@v4.0.2
      #   if: ${{ failure() || cancelled() }}
      #   with:
      #     github-token: ${{ secrets.PAC_TOKEN }}
      #     script: |
      #       const output = `Test for this commit has failed `${{ steps.createpr.outcomei }}``;
      #       github.repos.createCommitComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         commit_sha: context.sha,
      #         body: output
      #       })
      
