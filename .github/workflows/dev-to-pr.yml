name: 'Dev Pipeline - Panorama Deployment'

on:
  push:
    branches:
      - dev

jobs:
  terraform:
    name: 'Dev Pipeline - Panorama Deployment'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      working-directory: ./terraform/panorama
      run: terraform init
      env:
        TF_WORKSPACE: "dev"
    
    - name: Terraform Workspace
      id: workspace
      working-directory: ./terraform/panorama
      run: terraform workspace select dev

    # Validate terraform files
    - name: Terraform Validate
      id: validate
      working-directory: ./terraform/panorama
      run: terraform validate -no-color

    # Checks that all Terraform configuration files adhere to a canonical format.
    #- name: Terraform Format
    #  run: terraform fmt -check -recursive
    
    # Perform a security scan of the terraform code using checkov
    #- name: Run Checkov action
    #  id: checkov
    #  uses: bridgecrewio/checkov-action@master
    #  with: 
    #    framework: terraform

    # Upload results to GitHub Advanced Security
    #- name: Upload SARIF file
    #  if: success() || failure()
    #  uses: github/codeql-action/upload-sarif@v2
    #  with:
    #    sarif_file: results.sarif
    #    category: checkov

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'push'
      working-directory: ./terraform/panorama
      run: terraform plan -no-color
      continue-on-error: true

      # - uses: actions/github-script@v4.0.2
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.PAC_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #       github.repos.createCommitComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         commit_sha: context.sha,
      #         body: output
      #       })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: ./terraform/panorama
      run: terraform apply -auto-approve
        
    - name: Terraform Destroy
      id: destroy
      working-directory: ./terraform/panorama
      run: terraform destroy -auto-approve


      # - name: CreatePR if apply succeed 
      #   id: createpr
      #   uses: actions/github-script@v4.0.2
      #   if: steps.apply.outcome == 'success'
      #   with:
      #     debug: true
      #     github-token: ${{ secrets.PAC_TOKEN }}
      #     script: |
      #       github.pulls.create({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         title: "Auto PR generate by Github Action dev pipeline",
      #         head: "dev",
      #         base: "main"
      #       });
      # - name: Revert commit if any step failed
      #   uses: actions/github-script@v4.0.2
      #   if: ${{ failure() || cancelled() }}
      #   with:
      #     github-token: ${{ secrets.PAC_TOKEN }}
      #     script: |
      #       const output = `Test for this commit has failed `${{ steps.createpr.outcomei }}``;
      #       github.repos.createCommitComment({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         commit_sha: context.sha,
      #         body: output
      #       })